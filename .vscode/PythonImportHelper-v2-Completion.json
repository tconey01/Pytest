[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "pybullet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pybullet",
        "description": "pybullet",
        "detail": "pybullet",
        "documentation": {}
    },
    {
        "label": "pybullet_data",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pybullet_data",
        "description": "pybullet_data",
        "detail": "pybullet_data",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "run_simulation",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def run_simulation():\n    \"\"\"Continuously update the beam angle in the PyBullet simulation.\"\"\"\n    global beam_angle\n    last_time = time.time()\n    while True:\n        elapsed = time.time() - last_time\n        last_time = time.time()\n        # Adjust beam angle and step the simulation\n        p.setJointMotorControl2(ballbeam, 1, p.POSITION_CONTROL, targetPosition=beam_angle, force=500)\n        p.stepSimulation()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "stream_camera",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def stream_camera():\n    \"\"\"Stream camera frames to the client via WebSocket.\"\"\"\n    while True:\n        # Capture PyBullet camera image\n        img = p.getCameraImage(width, height, viewMatrix=view_matrix, projectionMatrix=proj_matrix)[2]\n        frame = np.array(img, dtype=np.uint8).reshape((height, width, 4))\n        frame = cv2.cvtColor(frame, cv2.COLOR_RGBA2BGR)\n        # Encode and emit the frame\n        _, buffer = cv2.imencode('.jpg', frame, [int(cv2.IMWRITE_JPEG_QUALITY), 80])\n        socketio.emit('new_frame', {'image': buffer.tobytes()})",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    \"\"\"Render the main HTML page.\"\"\"\n    return render_template('index.html')\n@socketio.on('keypress')\ndef handle_keypress(data):\n    \"\"\"Update beam angle based on user input.\"\"\"\n    global beam_angle\n    key = data['key']\n    if key == 'ArrowLeft':\n        beam_angle = max(beam_angle - angle_step, -0.5)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "handle_keypress",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def handle_keypress(data):\n    \"\"\"Update beam angle based on user input.\"\"\"\n    global beam_angle\n    key = data['key']\n    if key == 'ArrowLeft':\n        beam_angle = max(beam_angle - angle_step, -0.5)\n    elif key == 'ArrowRight':\n        beam_angle = min(beam_angle + angle_step, 0.5)\nif __name__ == '__main__':\n    # Start simulation and camera threads",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nsocketio = SocketIO(app, async_mode='threading', cors_allowed_origins='*')\n# Set up PyBullet simulation environment\nphysicsClient = p.connect(p.DIRECT)\np.setAdditionalSearchPath(pybullet_data.getDataPath())\np.setGravity(0, 0, -9.8)\np.setTimeStep(1 / 240)\n# Load plane and URDF models (ball-beam and ball)\nplaneId = p.loadURDF(\"plane.urdf\")\nballbeam = p.loadURDF(\"resources/ballbeam/ballbeam.urdf\", [0, 0, 0.5], useFixedBase=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "socketio",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "socketio = SocketIO(app, async_mode='threading', cors_allowed_origins='*')\n# Set up PyBullet simulation environment\nphysicsClient = p.connect(p.DIRECT)\np.setAdditionalSearchPath(pybullet_data.getDataPath())\np.setGravity(0, 0, -9.8)\np.setTimeStep(1 / 240)\n# Load plane and URDF models (ball-beam and ball)\nplaneId = p.loadURDF(\"plane.urdf\")\nballbeam = p.loadURDF(\"resources/ballbeam/ballbeam.urdf\", [0, 0, 0.5], useFixedBase=True)\nball = p.loadURDF(\"resources/ball/ball.urdf\", [0, 0, 1])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "physicsClient",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "physicsClient = p.connect(p.DIRECT)\np.setAdditionalSearchPath(pybullet_data.getDataPath())\np.setGravity(0, 0, -9.8)\np.setTimeStep(1 / 240)\n# Load plane and URDF models (ball-beam and ball)\nplaneId = p.loadURDF(\"plane.urdf\")\nballbeam = p.loadURDF(\"resources/ballbeam/ballbeam.urdf\", [0, 0, 0.5], useFixedBase=True)\nball = p.loadURDF(\"resources/ball/ball.urdf\", [0, 0, 1])\n# Configure camera settings\nwidth, height = 640, 360",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "planeId",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "planeId = p.loadURDF(\"plane.urdf\")\nballbeam = p.loadURDF(\"resources/ballbeam/ballbeam.urdf\", [0, 0, 0.5], useFixedBase=True)\nball = p.loadURDF(\"resources/ball/ball.urdf\", [0, 0, 1])\n# Configure camera settings\nwidth, height = 640, 360\nview_matrix = p.computeViewMatrix([0, 1.2, 0.6], [0, 0, 0.5], [0, 0, 1])\nproj_matrix = p.computeProjectionMatrixFOV(60, width / height, 0.1, 100)\n# Initialize beam control parameters\nbeam_angle = 0\nangle_step = 0.02",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ballbeam",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "ballbeam = p.loadURDF(\"resources/ballbeam/ballbeam.urdf\", [0, 0, 0.5], useFixedBase=True)\nball = p.loadURDF(\"resources/ball/ball.urdf\", [0, 0, 1])\n# Configure camera settings\nwidth, height = 640, 360\nview_matrix = p.computeViewMatrix([0, 1.2, 0.6], [0, 0, 0.5], [0, 0, 1])\nproj_matrix = p.computeProjectionMatrixFOV(60, width / height, 0.1, 100)\n# Initialize beam control parameters\nbeam_angle = 0\nangle_step = 0.02\ndef run_simulation():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ball",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "ball = p.loadURDF(\"resources/ball/ball.urdf\", [0, 0, 1])\n# Configure camera settings\nwidth, height = 640, 360\nview_matrix = p.computeViewMatrix([0, 1.2, 0.6], [0, 0, 0.5], [0, 0, 1])\nproj_matrix = p.computeProjectionMatrixFOV(60, width / height, 0.1, 100)\n# Initialize beam control parameters\nbeam_angle = 0\nangle_step = 0.02\ndef run_simulation():\n    \"\"\"Continuously update the beam angle in the PyBullet simulation.\"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "view_matrix",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "view_matrix = p.computeViewMatrix([0, 1.2, 0.6], [0, 0, 0.5], [0, 0, 1])\nproj_matrix = p.computeProjectionMatrixFOV(60, width / height, 0.1, 100)\n# Initialize beam control parameters\nbeam_angle = 0\nangle_step = 0.02\ndef run_simulation():\n    \"\"\"Continuously update the beam angle in the PyBullet simulation.\"\"\"\n    global beam_angle\n    last_time = time.time()\n    while True:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "proj_matrix",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "proj_matrix = p.computeProjectionMatrixFOV(60, width / height, 0.1, 100)\n# Initialize beam control parameters\nbeam_angle = 0\nangle_step = 0.02\ndef run_simulation():\n    \"\"\"Continuously update the beam angle in the PyBullet simulation.\"\"\"\n    global beam_angle\n    last_time = time.time()\n    while True:\n        elapsed = time.time() - last_time",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "beam_angle",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "beam_angle = 0\nangle_step = 0.02\ndef run_simulation():\n    \"\"\"Continuously update the beam angle in the PyBullet simulation.\"\"\"\n    global beam_angle\n    last_time = time.time()\n    while True:\n        elapsed = time.time() - last_time\n        last_time = time.time()\n        # Adjust beam angle and step the simulation",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "angle_step",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "angle_step = 0.02\ndef run_simulation():\n    \"\"\"Continuously update the beam angle in the PyBullet simulation.\"\"\"\n    global beam_angle\n    last_time = time.time()\n    while True:\n        elapsed = time.time() - last_time\n        last_time = time.time()\n        # Adjust beam angle and step the simulation\n        p.setJointMotorControl2(ballbeam, 1, p.POSITION_CONTROL, targetPosition=beam_angle, force=500)",
        "detail": "app",
        "documentation": {}
    }
]